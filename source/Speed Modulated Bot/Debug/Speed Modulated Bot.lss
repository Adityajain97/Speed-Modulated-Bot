
Speed Modulated Bot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800200  00000d08  00000d9c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d08  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002f  00800202  00800202  00000d9e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d9e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000138  00000000  00000000  00000dce  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ca2  00000000  00000000  00000f06  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002d9  00000000  00000000  00001ba8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000009dd  00000000  00000000  00001e81  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000314  00000000  00000000  00002860  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004c4  00000000  00000000  00002b74  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000889  00000000  00000000  00003038  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000158  00000000  00000000  000038c1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	1d c1       	rjmp	.+570    	; 0x240 <__vector_1>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	e7 c0       	rjmp	.+462    	; 0x1e4 <__vector_5>
  16:	00 00       	nop
  18:	c0 c0       	rjmp	.+384    	; 0x19a <__vector_6>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e8 e0       	ldi	r30, 0x08	; 8
  fc:	fd e0       	ldi	r31, 0x0D	; 13
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a2 30       	cpi	r26, 0x02	; 2
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a2 e0       	ldi	r26, 0x02	; 2
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a1 33       	cpi	r26, 0x31	; 49
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	01 d2       	rcall	.+1026   	; 0x522 <main>
 120:	f1 c5       	rjmp	.+3042   	; 0xd04 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <color_sensor_pin_config>:
	filter_green(); //select green filter
	pulse=0; //reset the count to 0
	_delay_ms(100); //capture the pulses for 100 ms or 0.1 second
	green = pulse;  //store the count in variable called green
	return green;
}
 124:	8a b1       	in	r24, 0x0a	; 10
 126:	8e 6f       	ori	r24, 0xFE	; 254
 128:	8a b9       	out	0x0a, r24	; 10
 12a:	58 9a       	sbi	0x0b, 0	; 11
 12c:	08 95       	ret

0000012e <adc_pin_config>:
 12e:	10 ba       	out	0x10, r1	; 16
 130:	11 ba       	out	0x11, r1	; 17
 132:	10 92 07 01 	sts	0x0107, r1
 136:	10 92 08 01 	sts	0x0108, r1
 13a:	08 95       	ret

0000013c <motion_pin_config>:
 13c:	81 b1       	in	r24, 0x01	; 1
 13e:	8f 60       	ori	r24, 0x0F	; 15
 140:	81 b9       	out	0x01, r24	; 1
 142:	82 b1       	in	r24, 0x02	; 2
 144:	80 7f       	andi	r24, 0xF0	; 240
 146:	82 b9       	out	0x02, r24	; 2
 148:	ea e0       	ldi	r30, 0x0A	; 10
 14a:	f1 e0       	ldi	r31, 0x01	; 1
 14c:	80 81       	ld	r24, Z
 14e:	88 61       	ori	r24, 0x18	; 24
 150:	80 83       	st	Z, r24
 152:	eb e0       	ldi	r30, 0x0B	; 11
 154:	f1 e0       	ldi	r31, 0x01	; 1
 156:	80 81       	ld	r24, Z
 158:	88 61       	ori	r24, 0x18	; 24
 15a:	80 83       	st	Z, r24
 15c:	08 95       	ret

0000015e <left_encoder_pin_config>:
 15e:	6c 98       	cbi	0x0d, 4	; 13
 160:	74 9a       	sbi	0x0e, 4	; 14
 162:	08 95       	ret

00000164 <right_encoder_pin_config>:
 164:	6d 98       	cbi	0x0d, 5	; 13
 166:	75 9a       	sbi	0x0e, 5	; 14
 168:	08 95       	ret

0000016a <port_init>:
 16a:	e1 df       	rcall	.-62     	; 0x12e <adc_pin_config>
 16c:	e7 df       	rcall	.-50     	; 0x13c <motion_pin_config>
 16e:	f7 df       	rcall	.-18     	; 0x15e <left_encoder_pin_config>
 170:	f9 df       	rcall	.-14     	; 0x164 <right_encoder_pin_config>
 172:	d8 cf       	rjmp	.-80     	; 0x124 <color_sensor_pin_config>
 174:	08 95       	ret

00000176 <left_position_encoder_interrupt_init>:
 176:	f8 94       	cli
 178:	ea e6       	ldi	r30, 0x6A	; 106
 17a:	f0 e0       	ldi	r31, 0x00	; 0
 17c:	80 81       	ld	r24, Z
 17e:	82 60       	ori	r24, 0x02	; 2
 180:	80 83       	st	Z, r24
 182:	ec 9a       	sbi	0x1d, 4	; 29
 184:	78 94       	sei
 186:	08 95       	ret

00000188 <right_position_encoder_interrupt_init>:
 188:	f8 94       	cli
 18a:	ea e6       	ldi	r30, 0x6A	; 106
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	80 81       	ld	r24, Z
 190:	88 60       	ori	r24, 0x08	; 8
 192:	80 83       	st	Z, r24
 194:	ed 9a       	sbi	0x1d, 5	; 29
 196:	78 94       	sei
 198:	08 95       	ret

0000019a <__vector_6>:
 19a:	1f 92       	push	r1
 19c:	0f 92       	push	r0
 19e:	0f b6       	in	r0, 0x3f	; 63
 1a0:	0f 92       	push	r0
 1a2:	11 24       	eor	r1, r1
 1a4:	8f 93       	push	r24
 1a6:	9f 93       	push	r25
 1a8:	af 93       	push	r26
 1aa:	bf 93       	push	r27
 1ac:	80 91 02 02 	lds	r24, 0x0202
 1b0:	90 91 03 02 	lds	r25, 0x0203
 1b4:	a0 91 04 02 	lds	r26, 0x0204
 1b8:	b0 91 05 02 	lds	r27, 0x0205
 1bc:	01 96       	adiw	r24, 0x01	; 1
 1be:	a1 1d       	adc	r26, r1
 1c0:	b1 1d       	adc	r27, r1
 1c2:	80 93 02 02 	sts	0x0202, r24
 1c6:	90 93 03 02 	sts	0x0203, r25
 1ca:	a0 93 04 02 	sts	0x0204, r26
 1ce:	b0 93 05 02 	sts	0x0205, r27
 1d2:	bf 91       	pop	r27
 1d4:	af 91       	pop	r26
 1d6:	9f 91       	pop	r25
 1d8:	8f 91       	pop	r24
 1da:	0f 90       	pop	r0
 1dc:	0f be       	out	0x3f, r0	; 63
 1de:	0f 90       	pop	r0
 1e0:	1f 90       	pop	r1
 1e2:	18 95       	reti

000001e4 <__vector_5>:
 1e4:	1f 92       	push	r1
 1e6:	0f 92       	push	r0
 1e8:	0f b6       	in	r0, 0x3f	; 63
 1ea:	0f 92       	push	r0
 1ec:	11 24       	eor	r1, r1
 1ee:	8f 93       	push	r24
 1f0:	9f 93       	push	r25
 1f2:	af 93       	push	r26
 1f4:	bf 93       	push	r27
 1f6:	80 91 06 02 	lds	r24, 0x0206
 1fa:	90 91 07 02 	lds	r25, 0x0207
 1fe:	a0 91 08 02 	lds	r26, 0x0208
 202:	b0 91 09 02 	lds	r27, 0x0209
 206:	01 96       	adiw	r24, 0x01	; 1
 208:	a1 1d       	adc	r26, r1
 20a:	b1 1d       	adc	r27, r1
 20c:	80 93 06 02 	sts	0x0206, r24
 210:	90 93 07 02 	sts	0x0207, r25
 214:	a0 93 08 02 	sts	0x0208, r26
 218:	b0 93 09 02 	sts	0x0209, r27
 21c:	bf 91       	pop	r27
 21e:	af 91       	pop	r26
 220:	9f 91       	pop	r25
 222:	8f 91       	pop	r24
 224:	0f 90       	pop	r0
 226:	0f be       	out	0x3f, r0	; 63
 228:	0f 90       	pop	r0
 22a:	1f 90       	pop	r1
 22c:	18 95       	reti

0000022e <color_sensor_pin_interrupt_init>:
 22e:	f8 94       	cli
 230:	e9 e6       	ldi	r30, 0x69	; 105
 232:	f0 e0       	ldi	r31, 0x00	; 0
 234:	80 81       	ld	r24, Z
 236:	82 60       	ori	r24, 0x02	; 2
 238:	80 83       	st	Z, r24
 23a:	e8 9a       	sbi	0x1d, 0	; 29
 23c:	78 94       	sei
 23e:	08 95       	ret

00000240 <__vector_1>:
 240:	1f 92       	push	r1
 242:	0f 92       	push	r0
 244:	0f b6       	in	r0, 0x3f	; 63
 246:	0f 92       	push	r0
 248:	11 24       	eor	r1, r1
 24a:	8f 93       	push	r24
 24c:	9f 93       	push	r25
 24e:	af 93       	push	r26
 250:	bf 93       	push	r27
 252:	80 91 0a 02 	lds	r24, 0x020A
 256:	90 91 0b 02 	lds	r25, 0x020B
 25a:	a0 91 0c 02 	lds	r26, 0x020C
 25e:	b0 91 0d 02 	lds	r27, 0x020D
 262:	01 96       	adiw	r24, 0x01	; 1
 264:	a1 1d       	adc	r26, r1
 266:	b1 1d       	adc	r27, r1
 268:	80 93 0a 02 	sts	0x020A, r24
 26c:	90 93 0b 02 	sts	0x020B, r25
 270:	a0 93 0c 02 	sts	0x020C, r26
 274:	b0 93 0d 02 	sts	0x020D, r27
 278:	bf 91       	pop	r27
 27a:	af 91       	pop	r26
 27c:	9f 91       	pop	r25
 27e:	8f 91       	pop	r24
 280:	0f 90       	pop	r0
 282:	0f be       	out	0x3f, r0	; 63
 284:	0f 90       	pop	r0
 286:	1f 90       	pop	r1
 288:	18 95       	reti

0000028a <timer5_init>:
 28a:	e1 e2       	ldi	r30, 0x21	; 33
 28c:	f1 e0       	ldi	r31, 0x01	; 1
 28e:	10 82       	st	Z, r1
 290:	8f ef       	ldi	r24, 0xFF	; 255
 292:	80 93 25 01 	sts	0x0125, r24
 296:	91 e0       	ldi	r25, 0x01	; 1
 298:	90 93 24 01 	sts	0x0124, r25
 29c:	10 92 29 01 	sts	0x0129, r1
 2a0:	80 93 28 01 	sts	0x0128, r24
 2a4:	10 92 2b 01 	sts	0x012B, r1
 2a8:	80 93 2a 01 	sts	0x012A, r24
 2ac:	10 92 2d 01 	sts	0x012D, r1
 2b0:	80 93 2c 01 	sts	0x012C, r24
 2b4:	89 ea       	ldi	r24, 0xA9	; 169
 2b6:	80 93 20 01 	sts	0x0120, r24
 2ba:	8b e0       	ldi	r24, 0x0B	; 11
 2bc:	80 83       	st	Z, r24
 2be:	08 95       	ret

000002c0 <adc_init>:
 2c0:	ea e7       	ldi	r30, 0x7A	; 122
 2c2:	f0 e0       	ldi	r31, 0x00	; 0
 2c4:	10 82       	st	Z, r1
 2c6:	10 92 7b 00 	sts	0x007B, r1
 2ca:	80 e2       	ldi	r24, 0x20	; 32
 2cc:	80 93 7c 00 	sts	0x007C, r24
 2d0:	80 e8       	ldi	r24, 0x80	; 128
 2d2:	80 bf       	out	0x30, r24	; 48
 2d4:	86 e8       	ldi	r24, 0x86	; 134
 2d6:	80 83       	st	Z, r24
 2d8:	08 95       	ret

000002da <ADC_Conversion>:
 2da:	88 30       	cpi	r24, 0x08	; 8
 2dc:	18 f0       	brcs	.+6      	; 0x2e4 <ADC_Conversion+0xa>
 2de:	98 e0       	ldi	r25, 0x08	; 8
 2e0:	90 93 7b 00 	sts	0x007B, r25
 2e4:	87 70       	andi	r24, 0x07	; 7
 2e6:	80 62       	ori	r24, 0x20	; 32
 2e8:	80 93 7c 00 	sts	0x007C, r24
 2ec:	ea e7       	ldi	r30, 0x7A	; 122
 2ee:	f0 e0       	ldi	r31, 0x00	; 0
 2f0:	80 81       	ld	r24, Z
 2f2:	80 64       	ori	r24, 0x40	; 64
 2f4:	80 83       	st	Z, r24
 2f6:	80 81       	ld	r24, Z
 2f8:	84 ff       	sbrs	r24, 4
 2fa:	fd cf       	rjmp	.-6      	; 0x2f6 <ADC_Conversion+0x1c>
 2fc:	80 91 79 00 	lds	r24, 0x0079
 300:	ea e7       	ldi	r30, 0x7A	; 122
 302:	f0 e0       	ldi	r31, 0x00	; 0
 304:	90 81       	ld	r25, Z
 306:	90 61       	ori	r25, 0x10	; 16
 308:	90 83       	st	Z, r25
 30a:	10 92 7b 00 	sts	0x007B, r1
 30e:	08 95       	ret

00000310 <motion_set>:
 310:	92 b1       	in	r25, 0x02	; 2
 312:	90 7f       	andi	r25, 0xF0	; 240
 314:	8f 70       	andi	r24, 0x0F	; 15
 316:	98 2b       	or	r25, r24
 318:	92 b9       	out	0x02, r25	; 2
 31a:	08 95       	ret

0000031c <forward>:
 31c:	86 e0       	ldi	r24, 0x06	; 6
 31e:	f8 cf       	rjmp	.-16     	; 0x310 <motion_set>
 320:	08 95       	ret

00000322 <stop>:
 322:	80 e0       	ldi	r24, 0x00	; 0
 324:	f5 cf       	rjmp	.-22     	; 0x310 <motion_set>
 326:	08 95       	ret

00000328 <left>:
 328:	85 e0       	ldi	r24, 0x05	; 5
 32a:	f2 cf       	rjmp	.-28     	; 0x310 <motion_set>
 32c:	08 95       	ret

0000032e <right>:
 32e:	8a e0       	ldi	r24, 0x0A	; 10
 330:	ef cf       	rjmp	.-34     	; 0x310 <motion_set>
 332:	08 95       	ret

00000334 <angle_rotate>:
 334:	cf 92       	push	r12
 336:	df 92       	push	r13
 338:	ef 92       	push	r14
 33a:	ff 92       	push	r15
 33c:	0f 93       	push	r16
 33e:	1f 93       	push	r17
 340:	bc 01       	movw	r22, r24
 342:	80 e0       	ldi	r24, 0x00	; 0
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	ed d3       	rcall	.+2010   	; 0xb22 <__floatunsisf>
 348:	28 e4       	ldi	r18, 0x48	; 72
 34a:	31 ee       	ldi	r19, 0xE1	; 225
 34c:	42 e8       	ldi	r20, 0x82	; 130
 34e:	50 e4       	ldi	r21, 0x40	; 64
 350:	4f d3       	rcall	.+1694   	; 0x9f0 <__divsf3>
 352:	bb d3       	rcall	.+1910   	; 0xaca <__fixunssfsi>
 354:	cb 01       	movw	r24, r22
 356:	a0 e0       	ldi	r26, 0x00	; 0
 358:	b0 e0       	ldi	r27, 0x00	; 0
 35a:	10 92 02 02 	sts	0x0202, r1
 35e:	10 92 03 02 	sts	0x0203, r1
 362:	10 92 04 02 	sts	0x0204, r1
 366:	10 92 05 02 	sts	0x0205, r1
 36a:	10 92 06 02 	sts	0x0206, r1
 36e:	10 92 07 02 	sts	0x0207, r1
 372:	10 92 08 02 	sts	0x0208, r1
 376:	10 92 09 02 	sts	0x0209, r1
 37a:	51 e0       	ldi	r21, 0x01	; 1
 37c:	e0 e0       	ldi	r30, 0x00	; 0
 37e:	c0 90 02 02 	lds	r12, 0x0202
 382:	d0 90 03 02 	lds	r13, 0x0203
 386:	e0 90 04 02 	lds	r14, 0x0204
 38a:	f0 90 05 02 	lds	r15, 0x0205
 38e:	00 91 06 02 	lds	r16, 0x0206
 392:	10 91 07 02 	lds	r17, 0x0207
 396:	20 91 08 02 	lds	r18, 0x0208
 39a:	30 91 09 02 	lds	r19, 0x0209
 39e:	45 2f       	mov	r20, r21
 3a0:	08 17       	cp	r16, r24
 3a2:	19 07       	cpc	r17, r25
 3a4:	2a 07       	cpc	r18, r26
 3a6:	3b 07       	cpc	r19, r27
 3a8:	08 f4       	brcc	.+2      	; 0x3ac <angle_rotate+0x78>
 3aa:	4e 2f       	mov	r20, r30
 3ac:	41 11       	cpse	r20, r1
 3ae:	09 c0       	rjmp	.+18     	; 0x3c2 <angle_rotate+0x8e>
 3b0:	25 2f       	mov	r18, r21
 3b2:	c8 16       	cp	r12, r24
 3b4:	d9 06       	cpc	r13, r25
 3b6:	ea 06       	cpc	r14, r26
 3b8:	fb 06       	cpc	r15, r27
 3ba:	08 f4       	brcc	.+2      	; 0x3be <angle_rotate+0x8a>
 3bc:	2e 2f       	mov	r18, r30
 3be:	22 23       	and	r18, r18
 3c0:	f1 f2       	breq	.-68     	; 0x37e <angle_rotate+0x4a>
 3c2:	af df       	rcall	.-162    	; 0x322 <stop>
 3c4:	1f 91       	pop	r17
 3c6:	0f 91       	pop	r16
 3c8:	ff 90       	pop	r15
 3ca:	ef 90       	pop	r14
 3cc:	df 90       	pop	r13
 3ce:	cf 90       	pop	r12
 3d0:	08 95       	ret

000003d2 <linear_distance_mm>:
 3d2:	0f 93       	push	r16
 3d4:	1f 93       	push	r17
 3d6:	bc 01       	movw	r22, r24
 3d8:	80 e0       	ldi	r24, 0x00	; 0
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	a2 d3       	rcall	.+1860   	; 0xb22 <__floatunsisf>
 3de:	25 ee       	ldi	r18, 0xE5	; 229
 3e0:	30 ed       	ldi	r19, 0xD0	; 208
 3e2:	4a ea       	ldi	r20, 0xAA	; 170
 3e4:	50 e4       	ldi	r21, 0x40	; 64
 3e6:	04 d3       	rcall	.+1544   	; 0x9f0 <__divsf3>
 3e8:	70 d3       	rcall	.+1760   	; 0xaca <__fixunssfsi>
 3ea:	10 92 02 02 	sts	0x0202, r1
 3ee:	10 92 03 02 	sts	0x0203, r1
 3f2:	10 92 04 02 	sts	0x0204, r1
 3f6:	10 92 05 02 	sts	0x0205, r1
 3fa:	00 91 02 02 	lds	r16, 0x0202
 3fe:	10 91 03 02 	lds	r17, 0x0203
 402:	20 91 04 02 	lds	r18, 0x0204
 406:	30 91 05 02 	lds	r19, 0x0205
 40a:	60 17       	cp	r22, r16
 40c:	71 07       	cpc	r23, r17
 40e:	82 07       	cpc	r24, r18
 410:	93 07       	cpc	r25, r19
 412:	98 f7       	brcc	.-26     	; 0x3fa <linear_distance_mm+0x28>
 414:	86 df       	rcall	.-244    	; 0x322 <stop>
 416:	1f 91       	pop	r17
 418:	0f 91       	pop	r16
 41a:	08 95       	ret

0000041c <forward_mm>:
 41c:	cf 93       	push	r28
 41e:	df 93       	push	r29
 420:	ec 01       	movw	r28, r24
 422:	7c df       	rcall	.-264    	; 0x31c <forward>
 424:	ce 01       	movw	r24, r28
 426:	d5 df       	rcall	.-86     	; 0x3d2 <linear_distance_mm>
 428:	df 91       	pop	r29
 42a:	cf 91       	pop	r28
 42c:	08 95       	ret

0000042e <left_degrees>:
 42e:	cf 93       	push	r28
 430:	df 93       	push	r29
 432:	ec 01       	movw	r28, r24
 434:	79 df       	rcall	.-270    	; 0x328 <left>
 436:	ce 01       	movw	r24, r28
 438:	7d df       	rcall	.-262    	; 0x334 <angle_rotate>
 43a:	df 91       	pop	r29
 43c:	cf 91       	pop	r28
 43e:	08 95       	ret

00000440 <right_degrees>:
 440:	cf 93       	push	r28
 442:	df 93       	push	r29
 444:	ec 01       	movw	r28, r24
 446:	73 df       	rcall	.-282    	; 0x32e <right>
 448:	ce 01       	movw	r24, r28
 44a:	74 df       	rcall	.-280    	; 0x334 <angle_rotate>
 44c:	df 91       	pop	r29
 44e:	cf 91       	pop	r28
 450:	08 95       	ret

00000452 <init_devices>:
 452:	f8 94       	cli
 454:	8a de       	rcall	.-748    	; 0x16a <port_init>
 456:	34 df       	rcall	.-408    	; 0x2c0 <adc_init>
 458:	18 df       	rcall	.-464    	; 0x28a <timer5_init>
 45a:	8d de       	rcall	.-742    	; 0x176 <left_position_encoder_interrupt_init>
 45c:	95 de       	rcall	.-726    	; 0x188 <right_position_encoder_interrupt_init>
 45e:	e7 de       	rcall	.-562    	; 0x22e <color_sensor_pin_interrupt_init>
 460:	78 94       	sei
 462:	08 95       	ret

00000464 <filter_red>:
 464:	5e 98       	cbi	0x0b, 6	; 11
 466:	5f 98       	cbi	0x0b, 7	; 11
 468:	08 95       	ret

0000046a <filter_blue>:
 46a:	5e 98       	cbi	0x0b, 6	; 11
 46c:	5f 9a       	sbi	0x0b, 7	; 11
 46e:	08 95       	ret

00000470 <color_sensor_scaling>:
 470:	5c 9a       	sbi	0x0b, 4	; 11
 472:	5d 9a       	sbi	0x0b, 5	; 11
 474:	08 95       	ret

00000476 <red_read>:
 476:	f6 df       	rcall	.-20     	; 0x464 <filter_red>
 478:	10 92 0a 02 	sts	0x020A, r1
 47c:	10 92 0b 02 	sts	0x020B, r1
 480:	10 92 0c 02 	sts	0x020C, r1
 484:	10 92 0d 02 	sts	0x020D, r1
 488:	2f ef       	ldi	r18, 0xFF	; 255
 48a:	8f e7       	ldi	r24, 0x7F	; 127
 48c:	94 e0       	ldi	r25, 0x04	; 4
 48e:	21 50       	subi	r18, 0x01	; 1
 490:	80 40       	sbci	r24, 0x00	; 0
 492:	90 40       	sbci	r25, 0x00	; 0
 494:	e1 f7       	brne	.-8      	; 0x48e <red_read+0x18>
 496:	00 c0       	rjmp	.+0      	; 0x498 <red_read+0x22>
 498:	00 00       	nop
 49a:	80 91 0a 02 	lds	r24, 0x020A
 49e:	90 91 0b 02 	lds	r25, 0x020B
 4a2:	a0 91 0c 02 	lds	r26, 0x020C
 4a6:	b0 91 0d 02 	lds	r27, 0x020D
 4aa:	80 93 2c 02 	sts	0x022C, r24
 4ae:	90 93 2d 02 	sts	0x022D, r25
 4b2:	a0 93 2e 02 	sts	0x022E, r26
 4b6:	b0 93 2f 02 	sts	0x022F, r27
 4ba:	60 91 2c 02 	lds	r22, 0x022C
 4be:	70 91 2d 02 	lds	r23, 0x022D
 4c2:	80 91 2e 02 	lds	r24, 0x022E
 4c6:	90 91 2f 02 	lds	r25, 0x022F
 4ca:	08 95       	ret

000004cc <blue_read>:
unsigned long int blue_read(void) // function to select blue filter and display the count generated by the sensor on LCD. The count will be more if the color is blue. The count will be very less if its red or green.
{
	//Blue
	filter_blue(); //select blue filter
 4cc:	ce df       	rcall	.-100    	; 0x46a <filter_blue>
	pulse=0; //reset the count to 0
 4ce:	10 92 0a 02 	sts	0x020A, r1
 4d2:	10 92 0b 02 	sts	0x020B, r1
 4d6:	10 92 0c 02 	sts	0x020C, r1
 4da:	10 92 0d 02 	sts	0x020D, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4de:	2f ef       	ldi	r18, 0xFF	; 255
 4e0:	8f e7       	ldi	r24, 0x7F	; 127
 4e2:	94 e0       	ldi	r25, 0x04	; 4
 4e4:	21 50       	subi	r18, 0x01	; 1
 4e6:	80 40       	sbci	r24, 0x00	; 0
 4e8:	90 40       	sbci	r25, 0x00	; 0
 4ea:	e1 f7       	brne	.-8      	; 0x4e4 <blue_read+0x18>
 4ec:	00 c0       	rjmp	.+0      	; 0x4ee <blue_read+0x22>
 4ee:	00 00       	nop
	_delay_ms(100); //capture the pulses for 100 ms or 0.1 second
	blue = pulse;  //store the count in variable called blue
 4f0:	80 91 0a 02 	lds	r24, 0x020A
 4f4:	90 91 0b 02 	lds	r25, 0x020B
 4f8:	a0 91 0c 02 	lds	r26, 0x020C
 4fc:	b0 91 0d 02 	lds	r27, 0x020D
 500:	80 93 20 02 	sts	0x0220, r24
 504:	90 93 21 02 	sts	0x0221, r25
 508:	a0 93 22 02 	sts	0x0222, r26
 50c:	b0 93 23 02 	sts	0x0223, r27
	return blue;
 510:	60 91 20 02 	lds	r22, 0x0220
 514:	70 91 21 02 	lds	r23, 0x0221
 518:	80 91 22 02 	lds	r24, 0x0222
 51c:	90 91 23 02 	lds	r25, 0x0223
}
 520:	08 95       	ret

00000522 <main>:
//Main Function
int main()
{
 522:	cf 93       	push	r28
 524:	df 93       	push	r29
 526:	00 d0       	rcall	.+0      	; 0x528 <main+0x6>
 528:	1f 92       	push	r1
 52a:	cd b7       	in	r28, 0x3d	; 61
 52c:	de b7       	in	r29, 0x3e	; 62
	unsigned long int r,b,black_threshold=0;
	int mode; // equals 1,2,3 for different positions at junctions
	init_devices();
 52e:	91 df       	rcall	.-222    	; 0x452 <init_devices>
	color_sensor_scaling();
 530:	9f df       	rcall	.-194    	; 0x470 <color_sensor_scaling>
 532:	04 e0       	ldi	r16, 0x04	; 4
 534:	10 e0       	ldi	r17, 0x00	; 0
	return blue;
}
//Main Function
int main()
{
	unsigned long int r,b,black_threshold=0;
 536:	c1 2c       	mov	r12, r1
 538:	d1 2c       	mov	r13, r1
 53a:	76 01       	movw	r14, r12
	init_devices();
	color_sensor_scaling();
	//Setting Black Threshold. mode variable as counter
	for(mode=5;mode>1; mode--)
	{
		r=red_read();
 53c:	9c df       	rcall	.-200    	; 0x476 <red_read>
 53e:	4b 01       	movw	r8, r22
 540:	5c 01       	movw	r10, r24
		b=blue_read();
 542:	c4 df       	rcall	.-120    	; 0x4cc <blue_read>
 544:	68 15       	cp	r22, r8
 546:	79 05       	cpc	r23, r9
 548:	8a 05       	cpc	r24, r10
 54a:	9b 05       	cpc	r25, r11
 54c:	10 f4       	brcc	.+4      	; 0x552 <main+0x30>
 54e:	c5 01       	movw	r24, r10
 550:	b4 01       	movw	r22, r8
 552:	c6 16       	cp	r12, r22
 554:	d7 06       	cpc	r13, r23
 556:	e8 06       	cpc	r14, r24
 558:	f9 06       	cpc	r15, r25
 55a:	10 f4       	brcc	.+4      	; 0x560 <main+0x3e>
 55c:	6b 01       	movw	r12, r22
 55e:	7c 01       	movw	r14, r24
 560:	01 50       	subi	r16, 0x01	; 1
 562:	11 09       	sbc	r17, r1
	unsigned long int r,b,black_threshold=0;
	int mode; // equals 1,2,3 for different positions at junctions
	init_devices();
	color_sensor_scaling();
	//Setting Black Threshold. mode variable as counter
	for(mode=5;mode>1; mode--)
 564:	01 15       	cp	r16, r1
 566:	11 05       	cpc	r17, r1
 568:	49 f7       	brne	.-46     	; 0x53c <main+0x1a>
		if(black_threshold<b)
		{
			black_threshold=b;
		}
	}
	black_threshold+=100;
 56a:	24 e6       	ldi	r18, 0x64	; 100
 56c:	c2 0e       	add	r12, r18
 56e:	d1 1c       	adc	r13, r1
 570:	e1 1c       	adc	r14, r1
 572:	f1 1c       	adc	r15, r1
	return a;
}
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
 574:	0f 2e       	mov	r0, r31
 576:	f8 e2       	ldi	r31, 0x28	; 40
 578:	af 2e       	mov	r10, r31
 57a:	bb 24       	eor	r11, r11
 57c:	b3 94       	inc	r11
 57e:	f0 2d       	mov	r31, r0
	OCR5BL = (unsigned char)right_motor;
 580:	0f 2e       	mov	r0, r31
 582:	fa e2       	ldi	r31, 0x2A	; 42
 584:	2f 2e       	mov	r2, r31
 586:	33 24       	eor	r3, r3
 588:	33 94       	inc	r3
 58a:	f0 2d       	mov	r31, r0
						velocity(70,70);
						right_degrees(50);
						right();
						while (ADC_Conversion(2)>0x10){}
						velocity(0,0);
						mode=1;
 58c:	31 e0       	ldi	r19, 0x01	; 1
 58e:	39 83       	std	Y+1, r19	; 0x01
 590:	1a 82       	std	Y+2, r1	; 0x02
		}
	}
	black_threshold+=100;
	while(1)
	{
		flag = 0;
 592:	10 92 0e 02 	sts	0x020E, r1
		Left = ADC_Conversion(3);	//Getting data of Left WL Sensor
 596:	83 e0       	ldi	r24, 0x03	; 3
 598:	a0 de       	rcall	.-704    	; 0x2da <ADC_Conversion>
 59a:	80 93 1f 02 	sts	0x021F, r24
		Center = ADC_Conversion(2);	//Getting data of Center WL Sensor
 59e:	82 e0       	ldi	r24, 0x02	; 2
 5a0:	9c de       	rcall	.-712    	; 0x2da <ADC_Conversion>
 5a2:	80 93 1e 02 	sts	0x021E, r24
		Right = ADC_Conversion(1);	//Getting data of Right WL Sensor
 5a6:	81 e0       	ldi	r24, 0x01	; 1
 5a8:	98 de       	rcall	.-720    	; 0x2da <ADC_Conversion>
 5aa:	98 2e       	mov	r9, r24
 5ac:	80 93 1d 02 	sts	0x021D, r24
		//Positive is right, negative is left
		error=(int)(Right-Left)/2;
 5b0:	80 90 1f 02 	lds	r8, 0x021F
 5b4:	90 e0       	ldi	r25, 0x00	; 0
 5b6:	88 19       	sub	r24, r8
 5b8:	91 09       	sbc	r25, r1
 5ba:	bc 01       	movw	r22, r24
 5bc:	12 f4       	brpl	.+4      	; 0x5c2 <main+0xa0>
 5be:	6f 5f       	subi	r22, 0xFF	; 255
 5c0:	7f 4f       	sbci	r23, 0xFF	; 255
 5c2:	75 95       	asr	r23
 5c4:	67 95       	ror	r22
 5c6:	70 93 18 02 	sts	0x0218, r23
 5ca:	60 93 17 02 	sts	0x0217, r22
		Differential=error-lastError;
 5ce:	80 91 15 02 	lds	r24, 0x0215
 5d2:	90 91 16 02 	lds	r25, 0x0216
 5d6:	fb 01       	movw	r30, r22
 5d8:	e8 1b       	sub	r30, r24
 5da:	f9 0b       	sbc	r31, r25
 5dc:	fc 83       	std	Y+4, r31	; 0x04
 5de:	eb 83       	std	Y+3, r30	; 0x03
 5e0:	f0 93 1a 02 	sts	0x021A, r31
 5e4:	e0 93 19 02 	sts	0x0219, r30
		Integral+=error;
 5e8:	00 91 1b 02 	lds	r16, 0x021B
 5ec:	10 91 1c 02 	lds	r17, 0x021C
 5f0:	06 0f       	add	r16, r22
 5f2:	17 1f       	adc	r17, r23
 5f4:	10 93 1c 02 	sts	0x021C, r17
 5f8:	00 93 1b 02 	sts	0x021B, r16
		MotorSpeed_Double=(double)(0.5*error+10*Differential+0.001*Integral);
 5fc:	88 27       	eor	r24, r24
 5fe:	77 fd       	sbrc	r23, 7
 600:	80 95       	com	r24
 602:	98 2f       	mov	r25, r24
 604:	90 d2       	rcall	.+1312   	; 0xb26 <__floatsisf>
 606:	20 e0       	ldi	r18, 0x00	; 0
 608:	30 e0       	ldi	r19, 0x00	; 0
 60a:	40 e0       	ldi	r20, 0x00	; 0
 60c:	5f e3       	ldi	r21, 0x3F	; 63
 60e:	17 d3       	rcall	.+1582   	; 0xc3e <__mulsf3>
 610:	2b 01       	movw	r4, r22
 612:	3c 01       	movw	r6, r24
 614:	8b 81       	ldd	r24, Y+3	; 0x03
 616:	9c 81       	ldd	r25, Y+4	; 0x04
 618:	88 0f       	add	r24, r24
 61a:	99 1f       	adc	r25, r25
 61c:	6b 81       	ldd	r22, Y+3	; 0x03
 61e:	7c 81       	ldd	r23, Y+4	; 0x04
 620:	66 0f       	add	r22, r22
 622:	77 1f       	adc	r23, r23
 624:	66 0f       	add	r22, r22
 626:	77 1f       	adc	r23, r23
 628:	66 0f       	add	r22, r22
 62a:	77 1f       	adc	r23, r23
 62c:	68 0f       	add	r22, r24
 62e:	79 1f       	adc	r23, r25
 630:	88 27       	eor	r24, r24
 632:	77 fd       	sbrc	r23, 7
 634:	80 95       	com	r24
 636:	98 2f       	mov	r25, r24
 638:	76 d2       	rcall	.+1260   	; 0xb26 <__floatsisf>
 63a:	9b 01       	movw	r18, r22
 63c:	ac 01       	movw	r20, r24
 63e:	c3 01       	movw	r24, r6
 640:	b2 01       	movw	r22, r4
 642:	72 d1       	rcall	.+740    	; 0x928 <__addsf3>
 644:	2b 01       	movw	r4, r22
 646:	3c 01       	movw	r6, r24
 648:	b8 01       	movw	r22, r16
 64a:	88 27       	eor	r24, r24
 64c:	77 fd       	sbrc	r23, 7
 64e:	80 95       	com	r24
 650:	98 2f       	mov	r25, r24
 652:	69 d2       	rcall	.+1234   	; 0xb26 <__floatsisf>
 654:	2f e6       	ldi	r18, 0x6F	; 111
 656:	32 e1       	ldi	r19, 0x12	; 18
 658:	43 e8       	ldi	r20, 0x83	; 131
 65a:	5a e3       	ldi	r21, 0x3A	; 58
 65c:	f0 d2       	rcall	.+1504   	; 0xc3e <__mulsf3>
 65e:	9b 01       	movw	r18, r22
 660:	ac 01       	movw	r20, r24
 662:	c3 01       	movw	r24, r6
 664:	b2 01       	movw	r22, r4
 666:	60 d1       	rcall	.+704    	; 0x928 <__addsf3>
 668:	60 93 11 02 	sts	0x0211, r22
 66c:	70 93 12 02 	sts	0x0212, r23
 670:	80 93 13 02 	sts	0x0213, r24
 674:	90 93 14 02 	sts	0x0214, r25
		MotorSpeed=(int)(MotorSpeed_Double);
 678:	23 d2       	rcall	.+1094   	; 0xac0 <__fixsfsi>
 67a:	9b 01       	movw	r18, r22
 67c:	70 93 27 02 	sts	0x0227, r23
 680:	60 93 26 02 	sts	0x0226, r22
		if(MotorSpeed>205)
 684:	6e 3c       	cpi	r22, 0xCE	; 206
 686:	71 05       	cpc	r23, r1
 688:	3c f0       	brlt	.+14     	; 0x698 <main+0x176>
		{
			MotorSpeed=205;
 68a:	2d ec       	ldi	r18, 0xCD	; 205
 68c:	30 e0       	ldi	r19, 0x00	; 0
 68e:	30 93 27 02 	sts	0x0227, r19
 692:	20 93 26 02 	sts	0x0226, r18
 696:	09 c0       	rjmp	.+18     	; 0x6aa <main+0x188>
		}
		if(MotorSpeed<-205)
 698:	23 33       	cpi	r18, 0x33	; 51
 69a:	3f 4f       	sbci	r19, 0xFF	; 255
 69c:	34 f4       	brge	.+12     	; 0x6aa <main+0x188>
		{
			MotorSpeed=-205;
 69e:	e3 e3       	ldi	r30, 0x33	; 51
 6a0:	ff ef       	ldi	r31, 0xFF	; 255
 6a2:	f0 93 27 02 	sts	0x0227, r31
 6a6:	e0 93 26 02 	sts	0x0226, r30
		}
		if(Center<0x10&&Left<0x10&&Right<0x10)//junction
 6aa:	80 91 1e 02 	lds	r24, 0x021E
 6ae:	80 31       	cpi	r24, 0x10	; 16
 6b0:	08 f0       	brcs	.+2      	; 0x6b4 <main+0x192>
 6b2:	b6 c0       	rjmp	.+364    	; 0x820 <main+0x2fe>
 6b4:	ff e0       	ldi	r31, 0x0F	; 15
 6b6:	f8 15       	cp	r31, r8
 6b8:	08 f4       	brcc	.+2      	; 0x6bc <main+0x19a>
 6ba:	b2 c0       	rjmp	.+356    	; 0x820 <main+0x2fe>
 6bc:	f9 15       	cp	r31, r9
 6be:	08 f4       	brcc	.+2      	; 0x6c2 <main+0x1a0>
 6c0:	af c0       	rjmp	.+350    	; 0x820 <main+0x2fe>
		{
			velocity(speed,speed);
 6c2:	80 91 00 02 	lds	r24, 0x0200
	return a;
}
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
 6c6:	f5 01       	movw	r30, r10
 6c8:	80 83       	st	Z, r24
	OCR5BL = (unsigned char)right_motor;
 6ca:	f1 01       	movw	r30, r2
 6cc:	80 83       	st	Z, r24
			MotorSpeed=-205;
		}
		if(Center<0x10&&Left<0x10&&Right<0x10)//junction
		{
			velocity(speed,speed);
			forward_mm(90);
 6ce:	8a e5       	ldi	r24, 0x5A	; 90
 6d0:	90 e0       	ldi	r25, 0x00	; 0
 6d2:	a4 de       	rcall	.-696    	; 0x41c <forward_mm>
 6d4:	88 24       	eor	r8, r8
 6d6:	83 94       	inc	r8
 6d8:	91 2c       	mov	r9, r1
	return a;
}
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
 6da:	16 e4       	ldi	r17, 0x46	; 70
 6dc:	ff ef       	ldi	r31, 0xFF	; 255
 6de:	2f ef       	ldi	r18, 0xFF	; 255
 6e0:	3c e2       	ldi	r19, 0x2C	; 44
 6e2:	f1 50       	subi	r31, 0x01	; 1
 6e4:	20 40       	sbci	r18, 0x00	; 0
 6e6:	30 40       	sbci	r19, 0x00	; 0
 6e8:	e1 f7       	brne	.-8      	; 0x6e2 <main+0x1c0>
 6ea:	00 c0       	rjmp	.+0      	; 0x6ec <main+0x1ca>
 6ec:	00 00       	nop
			//code for checking color in front
			//checking for distinction only between blue and red for branching
			while(1)
			{
				_delay_ms(1000);
				b=blue_read();
 6ee:	ee de       	rcall	.-548    	; 0x4cc <blue_read>
 6f0:	2b 01       	movw	r4, r22
 6f2:	3c 01       	movw	r6, r24
				r=red_read();
 6f4:	c0 de       	rcall	.-640    	; 0x476 <red_read>
				if(b<=r&&b>black_threshold&&r>black_threshold)
 6f6:	64 15       	cp	r22, r4
 6f8:	75 05       	cpc	r23, r5
 6fa:	86 05       	cpc	r24, r6
 6fc:	97 05       	cpc	r25, r7
 6fe:	08 f4       	brcc	.+2      	; 0x702 <main+0x1e0>
 700:	5f c0       	rjmp	.+190    	; 0x7c0 <main+0x29e>
 702:	c4 14       	cp	r12, r4
 704:	d5 04       	cpc	r13, r5
 706:	e6 04       	cpc	r14, r6
 708:	f7 04       	cpc	r15, r7
 70a:	08 f0       	brcs	.+2      	; 0x70e <main+0x1ec>
 70c:	6a c0       	rjmp	.+212    	; 0x7e2 <main+0x2c0>
 70e:	c6 16       	cp	r12, r22
 710:	d7 06       	cpc	r13, r23
 712:	e8 06       	cpc	r14, r24
 714:	f9 06       	cpc	r15, r25
 716:	08 f0       	brcs	.+2      	; 0x71a <main+0x1f8>
 718:	64 c0       	rjmp	.+200    	; 0x7e2 <main+0x2c0>
				{
					if(mode==1)
 71a:	81 e0       	ldi	r24, 0x01	; 1
 71c:	88 16       	cp	r8, r24
 71e:	91 04       	cpc	r9, r1
 720:	a9 f4       	brne	.+42     	; 0x74c <main+0x22a>
	return a;
}
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
 722:	f5 01       	movw	r30, r10
 724:	10 83       	st	Z, r17
	OCR5BL = (unsigned char)right_motor;
 726:	f1 01       	movw	r30, r2
 728:	10 83       	st	Z, r17
				if(b<=r&&b>black_threshold&&r>black_threshold)
				{
					if(mode==1)
					{
						velocity(70,70);
						right_degrees(50);
 72a:	82 e3       	ldi	r24, 0x32	; 50
 72c:	90 e0       	ldi	r25, 0x00	; 0
 72e:	88 de       	rcall	.-752    	; 0x440 <right_degrees>
						right();
 730:	fe dd       	rcall	.-1028   	; 0x32e <right>
						while (ADC_Conversion(2)>0x10){}
 732:	82 e0       	ldi	r24, 0x02	; 2
 734:	d2 dd       	rcall	.-1116   	; 0x2da <ADC_Conversion>
 736:	81 31       	cpi	r24, 0x11	; 17
 738:	e0 f7       	brcc	.-8      	; 0x732 <main+0x210>
	return a;
}
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
 73a:	f5 01       	movw	r30, r10
 73c:	10 82       	st	Z, r1
	OCR5BL = (unsigned char)right_motor;
 73e:	f1 01       	movw	r30, r2
 740:	10 82       	st	Z, r1
						velocity(70,70);
						right_degrees(50);
						right();
						while (ADC_Conversion(2)>0x10){}
						velocity(0,0);
						mode=2;
 742:	68 94       	set
 744:	88 24       	eor	r8, r8
 746:	81 f8       	bld	r8, 1
 748:	91 2c       	mov	r9, r1
 74a:	c8 cf       	rjmp	.-112    	; 0x6dc <main+0x1ba>
					}
					else if(mode==2)
 74c:	f2 e0       	ldi	r31, 0x02	; 2
 74e:	8f 16       	cp	r8, r31
 750:	91 04       	cpc	r9, r1
 752:	f1 f4       	brne	.+60     	; 0x790 <main+0x26e>
	return a;
}
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
 754:	f5 01       	movw	r30, r10
 756:	10 83       	st	Z, r17
	OCR5BL = (unsigned char)right_motor;
 758:	f1 01       	movw	r30, r2
 75a:	10 83       	st	Z, r17
						mode=2;
					}
					else if(mode==2)
					{
						velocity(70,70);
						left_degrees(50);
 75c:	82 e3       	ldi	r24, 0x32	; 50
 75e:	90 e0       	ldi	r25, 0x00	; 0
 760:	66 de       	rcall	.-820    	; 0x42e <left_degrees>
						left();
 762:	e2 dd       	rcall	.-1084   	; 0x328 <left>
						while (ADC_Conversion(2)>0x10){}
 764:	82 e0       	ldi	r24, 0x02	; 2
 766:	b9 dd       	rcall	.-1166   	; 0x2da <ADC_Conversion>
 768:	81 31       	cpi	r24, 0x11	; 17
 76a:	e0 f7       	brcc	.-8      	; 0x764 <main+0x242>
						left_degrees(50);
 76c:	82 e3       	ldi	r24, 0x32	; 50
 76e:	90 e0       	ldi	r25, 0x00	; 0
 770:	5e de       	rcall	.-836    	; 0x42e <left_degrees>
						left();
 772:	da dd       	rcall	.-1100   	; 0x328 <left>
						while (ADC_Conversion(2)>0x10){}
 774:	82 e0       	ldi	r24, 0x02	; 2
 776:	b1 dd       	rcall	.-1182   	; 0x2da <ADC_Conversion>
 778:	81 31       	cpi	r24, 0x11	; 17
 77a:	e0 f7       	brcc	.-8      	; 0x774 <main+0x252>
	return a;
}
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
 77c:	f5 01       	movw	r30, r10
 77e:	10 82       	st	Z, r1
	OCR5BL = (unsigned char)right_motor;
 780:	f1 01       	movw	r30, r2
 782:	10 82       	st	Z, r1
						while (ADC_Conversion(2)>0x10){}
						left_degrees(50);
						left();
						while (ADC_Conversion(2)>0x10){}
						velocity(0,0);
						mode=3;
 784:	0f 2e       	mov	r0, r31
 786:	f3 e0       	ldi	r31, 0x03	; 3
 788:	8f 2e       	mov	r8, r31
 78a:	f0 2d       	mov	r31, r0
 78c:	91 2c       	mov	r9, r1
 78e:	a6 cf       	rjmp	.-180    	; 0x6dc <main+0x1ba>
					}
					else if(mode==3)
 790:	f3 e0       	ldi	r31, 0x03	; 3
 792:	8f 16       	cp	r8, r31
 794:	91 04       	cpc	r9, r1
 796:	09 f0       	breq	.+2      	; 0x79a <main+0x278>
 798:	a1 cf       	rjmp	.-190    	; 0x6dc <main+0x1ba>
	return a;
}
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
 79a:	f5 01       	movw	r30, r10
 79c:	10 83       	st	Z, r17
	OCR5BL = (unsigned char)right_motor;
 79e:	f1 01       	movw	r30, r2
 7a0:	10 83       	st	Z, r17
						mode=3;
					}
					else if(mode==3)
					{
						velocity(70,70);
						right_degrees(50);
 7a2:	82 e3       	ldi	r24, 0x32	; 50
 7a4:	90 e0       	ldi	r25, 0x00	; 0
 7a6:	4c de       	rcall	.-872    	; 0x440 <right_degrees>
						right();
 7a8:	c2 dd       	rcall	.-1148   	; 0x32e <right>
						while (ADC_Conversion(2)>0x10){}
 7aa:	82 e0       	ldi	r24, 0x02	; 2
 7ac:	96 dd       	rcall	.-1236   	; 0x2da <ADC_Conversion>
 7ae:	81 31       	cpi	r24, 0x11	; 17
 7b0:	e0 f7       	brcc	.-8      	; 0x7aa <main+0x288>
	return a;
}
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
 7b2:	f5 01       	movw	r30, r10
 7b4:	10 82       	st	Z, r1
	OCR5BL = (unsigned char)right_motor;
 7b6:	f1 01       	movw	r30, r2
 7b8:	10 82       	st	Z, r1
						velocity(70,70);
						right_degrees(50);
						right();
						while (ADC_Conversion(2)>0x10){}
						velocity(0,0);
						mode=1;
 7ba:	89 80       	ldd	r8, Y+1	; 0x01
 7bc:	9a 80       	ldd	r9, Y+2	; 0x02
 7be:	8e cf       	rjmp	.-228    	; 0x6dc <main+0x1ba>
					}
				}
				else if(b>r&&b>black_threshold&&r>black_threshold)
 7c0:	c4 14       	cp	r12, r4
 7c2:	d5 04       	cpc	r13, r5
 7c4:	e6 04       	cpc	r14, r6
 7c6:	f7 04       	cpc	r15, r7
 7c8:	60 f4       	brcc	.+24     	; 0x7e2 <main+0x2c0>
 7ca:	c6 16       	cp	r12, r22
 7cc:	d7 06       	cpc	r13, r23
 7ce:	e8 06       	cpc	r14, r24
 7d0:	f9 06       	cpc	r15, r25
 7d2:	38 f4       	brcc	.+14     	; 0x7e2 <main+0x2c0>
				{
					velocity(speed,speed);
 7d4:	80 91 00 02 	lds	r24, 0x0200
	return a;
}
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
 7d8:	f5 01       	movw	r30, r10
 7da:	80 83       	st	Z, r24
	OCR5BL = (unsigned char)right_motor;
 7dc:	f1 01       	movw	r30, r2
 7de:	80 83       	st	Z, r24
 7e0:	1f c0       	rjmp	.+62     	; 0x820 <main+0x2fe>
				{
					velocity(speed,speed);
					mode=1;
					break;
				}
				else if(b<black_threshold&&r<black_threshold)
 7e2:	4c 14       	cp	r4, r12
 7e4:	5d 04       	cpc	r5, r13
 7e6:	6e 04       	cpc	r6, r14
 7e8:	7f 04       	cpc	r7, r15
 7ea:	08 f0       	brcs	.+2      	; 0x7ee <main+0x2cc>
 7ec:	77 cf       	rjmp	.-274    	; 0x6dc <main+0x1ba>
 7ee:	6c 15       	cp	r22, r12
 7f0:	7d 05       	cpc	r23, r13
 7f2:	8e 05       	cpc	r24, r14
 7f4:	9f 05       	cpc	r25, r15
 7f6:	08 f0       	brcs	.+2      	; 0x7fa <main+0x2d8>
 7f8:	71 cf       	rjmp	.-286    	; 0x6dc <main+0x1ba>
				{
					if(speed==100) speed=70;
 7fa:	80 91 00 02 	lds	r24, 0x0200
 7fe:	84 36       	cpi	r24, 0x64	; 100
 800:	21 f4       	brne	.+8      	; 0x80a <main+0x2e8>
 802:	86 e4       	ldi	r24, 0x46	; 70
 804:	80 93 00 02 	sts	0x0200, r24
 808:	05 c0       	rjmp	.+10     	; 0x814 <main+0x2f2>
					else if(speed==70) speed=100;
 80a:	86 34       	cpi	r24, 0x46	; 70
 80c:	19 f4       	brne	.+6      	; 0x814 <main+0x2f2>
 80e:	84 e6       	ldi	r24, 0x64	; 100
 810:	80 93 00 02 	sts	0x0200, r24
					velocity(speed,speed);
 814:	80 91 00 02 	lds	r24, 0x0200
	return a;
}
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
 818:	f5 01       	movw	r30, r10
 81a:	80 83       	st	Z, r24
	OCR5BL = (unsigned char)right_motor;
 81c:	f1 01       	movw	r30, r2
 81e:	80 83       	st	Z, r24
					mode=1;
					break;
				}
			}
		}
		if(Center<0x0A&&flag==0)
 820:	80 91 1e 02 	lds	r24, 0x021E
 824:	8a 30       	cpi	r24, 0x0A	; 10
 826:	70 f4       	brcc	.+28     	; 0x844 <main+0x322>
 828:	80 91 0e 02 	lds	r24, 0x020E
 82c:	81 11       	cpse	r24, r1
 82e:	0a c0       	rjmp	.+20     	; 0x844 <main+0x322>
		{
			forward();
 830:	75 dd       	rcall	.-1302   	; 0x31c <forward>
			velocity(speed,speed);
 832:	80 91 00 02 	lds	r24, 0x0200
	return a;
}
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
 836:	f5 01       	movw	r30, r10
 838:	80 83       	st	Z, r24
	OCR5BL = (unsigned char)right_motor;
 83a:	f1 01       	movw	r30, r2
 83c:	80 83       	st	Z, r24
		}
		if(Center<0x0A&&flag==0)
		{
			forward();
			velocity(speed,speed);
			flag=1;
 83e:	81 e0       	ldi	r24, 0x01	; 1
 840:	80 93 0e 02 	sts	0x020E, r24
		}
		if(MotorSpeed>0&&flag==0)
 844:	80 91 26 02 	lds	r24, 0x0226
 848:	90 91 27 02 	lds	r25, 0x0227
 84c:	18 16       	cp	r1, r24
 84e:	19 06       	cpc	r1, r25
 850:	8c f4       	brge	.+34     	; 0x874 <main+0x352>
 852:	20 91 0e 02 	lds	r18, 0x020E
 856:	21 11       	cpse	r18, r1
 858:	0d c0       	rjmp	.+26     	; 0x874 <main+0x352>
		{
			SavedTurnSpeed=MotorSpeed;
 85a:	90 93 10 02 	sts	0x0210, r25
 85e:	80 93 0f 02 	sts	0x020F, r24
			forward();
 862:	5c dd       	rcall	.-1352   	; 0x31c <forward>
			velocity(0,50+MotorSpeed);
 864:	e6 e2       	ldi	r30, 0x26	; 38
 866:	f2 e0       	ldi	r31, 0x02	; 2
 868:	80 81       	ld	r24, Z
 86a:	8e 5c       	subi	r24, 0xCE	; 206
	return a;
}
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
 86c:	f5 01       	movw	r30, r10
 86e:	10 82       	st	Z, r1
	OCR5BL = (unsigned char)right_motor;
 870:	f1 01       	movw	r30, r2
 872:	80 83       	st	Z, r24
		{
			SavedTurnSpeed=MotorSpeed;
			forward();
			velocity(0,50+MotorSpeed);
		}
		if(MotorSpeed<0&&flag==0)
 874:	80 91 26 02 	lds	r24, 0x0226
 878:	90 91 27 02 	lds	r25, 0x0227
 87c:	99 23       	and	r25, r25
 87e:	c4 f4       	brge	.+48     	; 0x8b0 <main+0x38e>
 880:	20 91 0e 02 	lds	r18, 0x020E
 884:	21 11       	cpse	r18, r1
 886:	14 c0       	rjmp	.+40     	; 0x8b0 <main+0x38e>
		{
			SavedTurnSpeed=MotorSpeed;
 888:	90 93 10 02 	sts	0x0210, r25
 88c:	80 93 0f 02 	sts	0x020F, r24
			MotorSpeed=-1*MotorSpeed;
 890:	91 95       	neg	r25
 892:	81 95       	neg	r24
 894:	91 09       	sbc	r25, r1
 896:	90 93 27 02 	sts	0x0227, r25
 89a:	80 93 26 02 	sts	0x0226, r24
			forward();
 89e:	3e dd       	rcall	.-1412   	; 0x31c <forward>
			velocity(50+MotorSpeed,0);
 8a0:	e6 e2       	ldi	r30, 0x26	; 38
 8a2:	f2 e0       	ldi	r31, 0x02	; 2
 8a4:	80 81       	ld	r24, Z
 8a6:	8e 5c       	subi	r24, 0xCE	; 206
	return a;
}
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
 8a8:	f5 01       	movw	r30, r10
 8aa:	80 83       	st	Z, r24
	OCR5BL = (unsigned char)right_motor;
 8ac:	f1 01       	movw	r30, r2
 8ae:	10 82       	st	Z, r1
			SavedTurnSpeed=MotorSpeed;
			MotorSpeed=-1*MotorSpeed;
			forward();
			velocity(50+MotorSpeed,0);
		}
		if(Center>0x0A&&Left>0x0A&&Right>0x0A)
 8b0:	80 91 1e 02 	lds	r24, 0x021E
 8b4:	8b 30       	cpi	r24, 0x0B	; 11
 8b6:	70 f1       	brcs	.+92     	; 0x914 <main+0x3f2>
 8b8:	80 91 1f 02 	lds	r24, 0x021F
 8bc:	8b 30       	cpi	r24, 0x0B	; 11
 8be:	50 f1       	brcs	.+84     	; 0x914 <main+0x3f2>
 8c0:	80 91 1d 02 	lds	r24, 0x021D
 8c4:	8b 30       	cpi	r24, 0x0B	; 11
 8c6:	30 f1       	brcs	.+76     	; 0x914 <main+0x3f2>
		{
			if(SavedTurnSpeed>0&&flag==0)
 8c8:	80 91 0f 02 	lds	r24, 0x020F
 8cc:	90 91 10 02 	lds	r25, 0x0210
 8d0:	18 16       	cp	r1, r24
 8d2:	19 06       	cpc	r1, r25
 8d4:	64 f4       	brge	.+24     	; 0x8ee <main+0x3cc>
 8d6:	80 91 0e 02 	lds	r24, 0x020E
 8da:	81 11       	cpse	r24, r1
 8dc:	08 c0       	rjmp	.+16     	; 0x8ee <main+0x3cc>
			{
				forward();
 8de:	1e dd       	rcall	.-1476   	; 0x31c <forward>
				velocity(0,50+SavedTurnSpeed);
 8e0:	80 91 0f 02 	lds	r24, 0x020F
 8e4:	8e 5c       	subi	r24, 0xCE	; 206
	return a;
}
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
 8e6:	f5 01       	movw	r30, r10
 8e8:	10 82       	st	Z, r1
	OCR5BL = (unsigned char)right_motor;
 8ea:	f1 01       	movw	r30, r2
 8ec:	80 83       	st	Z, r24
			if(SavedTurnSpeed>0&&flag==0)
			{
				forward();
				velocity(0,50+SavedTurnSpeed);
			}
			if(SavedTurnSpeed<0&&flag==0)
 8ee:	80 91 0f 02 	lds	r24, 0x020F
 8f2:	90 91 10 02 	lds	r25, 0x0210
 8f6:	99 23       	and	r25, r25
 8f8:	6c f4       	brge	.+26     	; 0x914 <main+0x3f2>
 8fa:	80 91 0e 02 	lds	r24, 0x020E
 8fe:	81 11       	cpse	r24, r1
 900:	09 c0       	rjmp	.+18     	; 0x914 <main+0x3f2>
			{
				forward();
 902:	0c dd       	rcall	.-1512   	; 0x31c <forward>
				velocity(50-SavedTurnSpeed,0);
 904:	90 91 0f 02 	lds	r25, 0x020F
 908:	82 e3       	ldi	r24, 0x32	; 50
 90a:	89 1b       	sub	r24, r25
	return a;
}
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
 90c:	f5 01       	movw	r30, r10
 90e:	80 83       	st	Z, r24
	OCR5BL = (unsigned char)right_motor;
 910:	f1 01       	movw	r30, r2
 912:	10 82       	st	Z, r1
			{
				forward();
				velocity(50-SavedTurnSpeed,0);
			}
		}
		lastError=error;
 914:	80 91 17 02 	lds	r24, 0x0217
 918:	90 91 18 02 	lds	r25, 0x0218
 91c:	90 93 16 02 	sts	0x0216, r25
 920:	80 93 15 02 	sts	0x0215, r24
	}
 924:	36 ce       	rjmp	.-916    	; 0x592 <main+0x70>

00000926 <__subsf3>:
 926:	50 58       	subi	r21, 0x80	; 128

00000928 <__addsf3>:
 928:	bb 27       	eor	r27, r27
 92a:	aa 27       	eor	r26, r26
 92c:	0e d0       	rcall	.+28     	; 0x94a <__addsf3x>
 92e:	4d c1       	rjmp	.+666    	; 0xbca <__fp_round>
 930:	3e d1       	rcall	.+636    	; 0xbae <__fp_pscA>
 932:	30 f0       	brcs	.+12     	; 0x940 <__addsf3+0x18>
 934:	43 d1       	rcall	.+646    	; 0xbbc <__fp_pscB>
 936:	20 f0       	brcs	.+8      	; 0x940 <__addsf3+0x18>
 938:	31 f4       	brne	.+12     	; 0x946 <__addsf3+0x1e>
 93a:	9f 3f       	cpi	r25, 0xFF	; 255
 93c:	11 f4       	brne	.+4      	; 0x942 <__addsf3+0x1a>
 93e:	1e f4       	brtc	.+6      	; 0x946 <__addsf3+0x1e>
 940:	33 c1       	rjmp	.+614    	; 0xba8 <__fp_nan>
 942:	0e f4       	brtc	.+2      	; 0x946 <__addsf3+0x1e>
 944:	e0 95       	com	r30
 946:	e7 fb       	bst	r30, 7
 948:	29 c1       	rjmp	.+594    	; 0xb9c <__fp_inf>

0000094a <__addsf3x>:
 94a:	e9 2f       	mov	r30, r25
 94c:	4f d1       	rcall	.+670    	; 0xbec <__fp_split3>
 94e:	80 f3       	brcs	.-32     	; 0x930 <__addsf3+0x8>
 950:	ba 17       	cp	r27, r26
 952:	62 07       	cpc	r22, r18
 954:	73 07       	cpc	r23, r19
 956:	84 07       	cpc	r24, r20
 958:	95 07       	cpc	r25, r21
 95a:	18 f0       	brcs	.+6      	; 0x962 <__addsf3x+0x18>
 95c:	71 f4       	brne	.+28     	; 0x97a <__addsf3x+0x30>
 95e:	9e f5       	brtc	.+102    	; 0x9c6 <__addsf3x+0x7c>
 960:	67 c1       	rjmp	.+718    	; 0xc30 <__fp_zero>
 962:	0e f4       	brtc	.+2      	; 0x966 <__addsf3x+0x1c>
 964:	e0 95       	com	r30
 966:	0b 2e       	mov	r0, r27
 968:	ba 2f       	mov	r27, r26
 96a:	a0 2d       	mov	r26, r0
 96c:	0b 01       	movw	r0, r22
 96e:	b9 01       	movw	r22, r18
 970:	90 01       	movw	r18, r0
 972:	0c 01       	movw	r0, r24
 974:	ca 01       	movw	r24, r20
 976:	a0 01       	movw	r20, r0
 978:	11 24       	eor	r1, r1
 97a:	ff 27       	eor	r31, r31
 97c:	59 1b       	sub	r21, r25
 97e:	99 f0       	breq	.+38     	; 0x9a6 <__addsf3x+0x5c>
 980:	59 3f       	cpi	r21, 0xF9	; 249
 982:	50 f4       	brcc	.+20     	; 0x998 <__addsf3x+0x4e>
 984:	50 3e       	cpi	r21, 0xE0	; 224
 986:	68 f1       	brcs	.+90     	; 0x9e2 <__addsf3x+0x98>
 988:	1a 16       	cp	r1, r26
 98a:	f0 40       	sbci	r31, 0x00	; 0
 98c:	a2 2f       	mov	r26, r18
 98e:	23 2f       	mov	r18, r19
 990:	34 2f       	mov	r19, r20
 992:	44 27       	eor	r20, r20
 994:	58 5f       	subi	r21, 0xF8	; 248
 996:	f3 cf       	rjmp	.-26     	; 0x97e <__addsf3x+0x34>
 998:	46 95       	lsr	r20
 99a:	37 95       	ror	r19
 99c:	27 95       	ror	r18
 99e:	a7 95       	ror	r26
 9a0:	f0 40       	sbci	r31, 0x00	; 0
 9a2:	53 95       	inc	r21
 9a4:	c9 f7       	brne	.-14     	; 0x998 <__addsf3x+0x4e>
 9a6:	7e f4       	brtc	.+30     	; 0x9c6 <__addsf3x+0x7c>
 9a8:	1f 16       	cp	r1, r31
 9aa:	ba 0b       	sbc	r27, r26
 9ac:	62 0b       	sbc	r22, r18
 9ae:	73 0b       	sbc	r23, r19
 9b0:	84 0b       	sbc	r24, r20
 9b2:	ba f0       	brmi	.+46     	; 0x9e2 <__addsf3x+0x98>
 9b4:	91 50       	subi	r25, 0x01	; 1
 9b6:	a1 f0       	breq	.+40     	; 0x9e0 <__addsf3x+0x96>
 9b8:	ff 0f       	add	r31, r31
 9ba:	bb 1f       	adc	r27, r27
 9bc:	66 1f       	adc	r22, r22
 9be:	77 1f       	adc	r23, r23
 9c0:	88 1f       	adc	r24, r24
 9c2:	c2 f7       	brpl	.-16     	; 0x9b4 <__addsf3x+0x6a>
 9c4:	0e c0       	rjmp	.+28     	; 0x9e2 <__addsf3x+0x98>
 9c6:	ba 0f       	add	r27, r26
 9c8:	62 1f       	adc	r22, r18
 9ca:	73 1f       	adc	r23, r19
 9cc:	84 1f       	adc	r24, r20
 9ce:	48 f4       	brcc	.+18     	; 0x9e2 <__addsf3x+0x98>
 9d0:	87 95       	ror	r24
 9d2:	77 95       	ror	r23
 9d4:	67 95       	ror	r22
 9d6:	b7 95       	ror	r27
 9d8:	f7 95       	ror	r31
 9da:	9e 3f       	cpi	r25, 0xFE	; 254
 9dc:	08 f0       	brcs	.+2      	; 0x9e0 <__addsf3x+0x96>
 9de:	b3 cf       	rjmp	.-154    	; 0x946 <__addsf3+0x1e>
 9e0:	93 95       	inc	r25
 9e2:	88 0f       	add	r24, r24
 9e4:	08 f0       	brcs	.+2      	; 0x9e8 <__addsf3x+0x9e>
 9e6:	99 27       	eor	r25, r25
 9e8:	ee 0f       	add	r30, r30
 9ea:	97 95       	ror	r25
 9ec:	87 95       	ror	r24
 9ee:	08 95       	ret

000009f0 <__divsf3>:
 9f0:	0c d0       	rcall	.+24     	; 0xa0a <__divsf3x>
 9f2:	eb c0       	rjmp	.+470    	; 0xbca <__fp_round>
 9f4:	e3 d0       	rcall	.+454    	; 0xbbc <__fp_pscB>
 9f6:	40 f0       	brcs	.+16     	; 0xa08 <__divsf3+0x18>
 9f8:	da d0       	rcall	.+436    	; 0xbae <__fp_pscA>
 9fa:	30 f0       	brcs	.+12     	; 0xa08 <__divsf3+0x18>
 9fc:	21 f4       	brne	.+8      	; 0xa06 <__divsf3+0x16>
 9fe:	5f 3f       	cpi	r21, 0xFF	; 255
 a00:	19 f0       	breq	.+6      	; 0xa08 <__divsf3+0x18>
 a02:	cc c0       	rjmp	.+408    	; 0xb9c <__fp_inf>
 a04:	51 11       	cpse	r21, r1
 a06:	15 c1       	rjmp	.+554    	; 0xc32 <__fp_szero>
 a08:	cf c0       	rjmp	.+414    	; 0xba8 <__fp_nan>

00000a0a <__divsf3x>:
 a0a:	f0 d0       	rcall	.+480    	; 0xbec <__fp_split3>
 a0c:	98 f3       	brcs	.-26     	; 0x9f4 <__divsf3+0x4>

00000a0e <__divsf3_pse>:
 a0e:	99 23       	and	r25, r25
 a10:	c9 f3       	breq	.-14     	; 0xa04 <__divsf3+0x14>
 a12:	55 23       	and	r21, r21
 a14:	b1 f3       	breq	.-20     	; 0xa02 <__divsf3+0x12>
 a16:	95 1b       	sub	r25, r21
 a18:	55 0b       	sbc	r21, r21
 a1a:	bb 27       	eor	r27, r27
 a1c:	aa 27       	eor	r26, r26
 a1e:	62 17       	cp	r22, r18
 a20:	73 07       	cpc	r23, r19
 a22:	84 07       	cpc	r24, r20
 a24:	38 f0       	brcs	.+14     	; 0xa34 <__divsf3_pse+0x26>
 a26:	9f 5f       	subi	r25, 0xFF	; 255
 a28:	5f 4f       	sbci	r21, 0xFF	; 255
 a2a:	22 0f       	add	r18, r18
 a2c:	33 1f       	adc	r19, r19
 a2e:	44 1f       	adc	r20, r20
 a30:	aa 1f       	adc	r26, r26
 a32:	a9 f3       	breq	.-22     	; 0xa1e <__divsf3_pse+0x10>
 a34:	33 d0       	rcall	.+102    	; 0xa9c <__divsf3_pse+0x8e>
 a36:	0e 2e       	mov	r0, r30
 a38:	3a f0       	brmi	.+14     	; 0xa48 <__divsf3_pse+0x3a>
 a3a:	e0 e8       	ldi	r30, 0x80	; 128
 a3c:	30 d0       	rcall	.+96     	; 0xa9e <__divsf3_pse+0x90>
 a3e:	91 50       	subi	r25, 0x01	; 1
 a40:	50 40       	sbci	r21, 0x00	; 0
 a42:	e6 95       	lsr	r30
 a44:	00 1c       	adc	r0, r0
 a46:	ca f7       	brpl	.-14     	; 0xa3a <__divsf3_pse+0x2c>
 a48:	29 d0       	rcall	.+82     	; 0xa9c <__divsf3_pse+0x8e>
 a4a:	fe 2f       	mov	r31, r30
 a4c:	27 d0       	rcall	.+78     	; 0xa9c <__divsf3_pse+0x8e>
 a4e:	66 0f       	add	r22, r22
 a50:	77 1f       	adc	r23, r23
 a52:	88 1f       	adc	r24, r24
 a54:	bb 1f       	adc	r27, r27
 a56:	26 17       	cp	r18, r22
 a58:	37 07       	cpc	r19, r23
 a5a:	48 07       	cpc	r20, r24
 a5c:	ab 07       	cpc	r26, r27
 a5e:	b0 e8       	ldi	r27, 0x80	; 128
 a60:	09 f0       	breq	.+2      	; 0xa64 <__divsf3_pse+0x56>
 a62:	bb 0b       	sbc	r27, r27
 a64:	80 2d       	mov	r24, r0
 a66:	bf 01       	movw	r22, r30
 a68:	ff 27       	eor	r31, r31
 a6a:	93 58       	subi	r25, 0x83	; 131
 a6c:	5f 4f       	sbci	r21, 0xFF	; 255
 a6e:	2a f0       	brmi	.+10     	; 0xa7a <__divsf3_pse+0x6c>
 a70:	9e 3f       	cpi	r25, 0xFE	; 254
 a72:	51 05       	cpc	r21, r1
 a74:	68 f0       	brcs	.+26     	; 0xa90 <__divsf3_pse+0x82>
 a76:	92 c0       	rjmp	.+292    	; 0xb9c <__fp_inf>
 a78:	dc c0       	rjmp	.+440    	; 0xc32 <__fp_szero>
 a7a:	5f 3f       	cpi	r21, 0xFF	; 255
 a7c:	ec f3       	brlt	.-6      	; 0xa78 <__divsf3_pse+0x6a>
 a7e:	98 3e       	cpi	r25, 0xE8	; 232
 a80:	dc f3       	brlt	.-10     	; 0xa78 <__divsf3_pse+0x6a>
 a82:	86 95       	lsr	r24
 a84:	77 95       	ror	r23
 a86:	67 95       	ror	r22
 a88:	b7 95       	ror	r27
 a8a:	f7 95       	ror	r31
 a8c:	9f 5f       	subi	r25, 0xFF	; 255
 a8e:	c9 f7       	brne	.-14     	; 0xa82 <__divsf3_pse+0x74>
 a90:	88 0f       	add	r24, r24
 a92:	91 1d       	adc	r25, r1
 a94:	96 95       	lsr	r25
 a96:	87 95       	ror	r24
 a98:	97 f9       	bld	r25, 7
 a9a:	08 95       	ret
 a9c:	e1 e0       	ldi	r30, 0x01	; 1
 a9e:	66 0f       	add	r22, r22
 aa0:	77 1f       	adc	r23, r23
 aa2:	88 1f       	adc	r24, r24
 aa4:	bb 1f       	adc	r27, r27
 aa6:	62 17       	cp	r22, r18
 aa8:	73 07       	cpc	r23, r19
 aaa:	84 07       	cpc	r24, r20
 aac:	ba 07       	cpc	r27, r26
 aae:	20 f0       	brcs	.+8      	; 0xab8 <__divsf3_pse+0xaa>
 ab0:	62 1b       	sub	r22, r18
 ab2:	73 0b       	sbc	r23, r19
 ab4:	84 0b       	sbc	r24, r20
 ab6:	ba 0b       	sbc	r27, r26
 ab8:	ee 1f       	adc	r30, r30
 aba:	88 f7       	brcc	.-30     	; 0xa9e <__divsf3_pse+0x90>
 abc:	e0 95       	com	r30
 abe:	08 95       	ret

00000ac0 <__fixsfsi>:
 ac0:	04 d0       	rcall	.+8      	; 0xaca <__fixunssfsi>
 ac2:	68 94       	set
 ac4:	b1 11       	cpse	r27, r1
 ac6:	b5 c0       	rjmp	.+362    	; 0xc32 <__fp_szero>
 ac8:	08 95       	ret

00000aca <__fixunssfsi>:
 aca:	98 d0       	rcall	.+304    	; 0xbfc <__fp_splitA>
 acc:	88 f0       	brcs	.+34     	; 0xaf0 <__fixunssfsi+0x26>
 ace:	9f 57       	subi	r25, 0x7F	; 127
 ad0:	90 f0       	brcs	.+36     	; 0xaf6 <__fixunssfsi+0x2c>
 ad2:	b9 2f       	mov	r27, r25
 ad4:	99 27       	eor	r25, r25
 ad6:	b7 51       	subi	r27, 0x17	; 23
 ad8:	a0 f0       	brcs	.+40     	; 0xb02 <__fixunssfsi+0x38>
 ada:	d1 f0       	breq	.+52     	; 0xb10 <__fixunssfsi+0x46>
 adc:	66 0f       	add	r22, r22
 ade:	77 1f       	adc	r23, r23
 ae0:	88 1f       	adc	r24, r24
 ae2:	99 1f       	adc	r25, r25
 ae4:	1a f0       	brmi	.+6      	; 0xaec <__fixunssfsi+0x22>
 ae6:	ba 95       	dec	r27
 ae8:	c9 f7       	brne	.-14     	; 0xadc <__fixunssfsi+0x12>
 aea:	12 c0       	rjmp	.+36     	; 0xb10 <__fixunssfsi+0x46>
 aec:	b1 30       	cpi	r27, 0x01	; 1
 aee:	81 f0       	breq	.+32     	; 0xb10 <__fixunssfsi+0x46>
 af0:	9f d0       	rcall	.+318    	; 0xc30 <__fp_zero>
 af2:	b1 e0       	ldi	r27, 0x01	; 1
 af4:	08 95       	ret
 af6:	9c c0       	rjmp	.+312    	; 0xc30 <__fp_zero>
 af8:	67 2f       	mov	r22, r23
 afa:	78 2f       	mov	r23, r24
 afc:	88 27       	eor	r24, r24
 afe:	b8 5f       	subi	r27, 0xF8	; 248
 b00:	39 f0       	breq	.+14     	; 0xb10 <__fixunssfsi+0x46>
 b02:	b9 3f       	cpi	r27, 0xF9	; 249
 b04:	cc f3       	brlt	.-14     	; 0xaf8 <__fixunssfsi+0x2e>
 b06:	86 95       	lsr	r24
 b08:	77 95       	ror	r23
 b0a:	67 95       	ror	r22
 b0c:	b3 95       	inc	r27
 b0e:	d9 f7       	brne	.-10     	; 0xb06 <__fixunssfsi+0x3c>
 b10:	3e f4       	brtc	.+14     	; 0xb20 <__fixunssfsi+0x56>
 b12:	90 95       	com	r25
 b14:	80 95       	com	r24
 b16:	70 95       	com	r23
 b18:	61 95       	neg	r22
 b1a:	7f 4f       	sbci	r23, 0xFF	; 255
 b1c:	8f 4f       	sbci	r24, 0xFF	; 255
 b1e:	9f 4f       	sbci	r25, 0xFF	; 255
 b20:	08 95       	ret

00000b22 <__floatunsisf>:
 b22:	e8 94       	clt
 b24:	09 c0       	rjmp	.+18     	; 0xb38 <__floatsisf+0x12>

00000b26 <__floatsisf>:
 b26:	97 fb       	bst	r25, 7
 b28:	3e f4       	brtc	.+14     	; 0xb38 <__floatsisf+0x12>
 b2a:	90 95       	com	r25
 b2c:	80 95       	com	r24
 b2e:	70 95       	com	r23
 b30:	61 95       	neg	r22
 b32:	7f 4f       	sbci	r23, 0xFF	; 255
 b34:	8f 4f       	sbci	r24, 0xFF	; 255
 b36:	9f 4f       	sbci	r25, 0xFF	; 255
 b38:	99 23       	and	r25, r25
 b3a:	a9 f0       	breq	.+42     	; 0xb66 <__floatsisf+0x40>
 b3c:	f9 2f       	mov	r31, r25
 b3e:	96 e9       	ldi	r25, 0x96	; 150
 b40:	bb 27       	eor	r27, r27
 b42:	93 95       	inc	r25
 b44:	f6 95       	lsr	r31
 b46:	87 95       	ror	r24
 b48:	77 95       	ror	r23
 b4a:	67 95       	ror	r22
 b4c:	b7 95       	ror	r27
 b4e:	f1 11       	cpse	r31, r1
 b50:	f8 cf       	rjmp	.-16     	; 0xb42 <__floatsisf+0x1c>
 b52:	fa f4       	brpl	.+62     	; 0xb92 <__floatsisf+0x6c>
 b54:	bb 0f       	add	r27, r27
 b56:	11 f4       	brne	.+4      	; 0xb5c <__floatsisf+0x36>
 b58:	60 ff       	sbrs	r22, 0
 b5a:	1b c0       	rjmp	.+54     	; 0xb92 <__floatsisf+0x6c>
 b5c:	6f 5f       	subi	r22, 0xFF	; 255
 b5e:	7f 4f       	sbci	r23, 0xFF	; 255
 b60:	8f 4f       	sbci	r24, 0xFF	; 255
 b62:	9f 4f       	sbci	r25, 0xFF	; 255
 b64:	16 c0       	rjmp	.+44     	; 0xb92 <__floatsisf+0x6c>
 b66:	88 23       	and	r24, r24
 b68:	11 f0       	breq	.+4      	; 0xb6e <__floatsisf+0x48>
 b6a:	96 e9       	ldi	r25, 0x96	; 150
 b6c:	11 c0       	rjmp	.+34     	; 0xb90 <__floatsisf+0x6a>
 b6e:	77 23       	and	r23, r23
 b70:	21 f0       	breq	.+8      	; 0xb7a <__floatsisf+0x54>
 b72:	9e e8       	ldi	r25, 0x8E	; 142
 b74:	87 2f       	mov	r24, r23
 b76:	76 2f       	mov	r23, r22
 b78:	05 c0       	rjmp	.+10     	; 0xb84 <__floatsisf+0x5e>
 b7a:	66 23       	and	r22, r22
 b7c:	71 f0       	breq	.+28     	; 0xb9a <__floatsisf+0x74>
 b7e:	96 e8       	ldi	r25, 0x86	; 134
 b80:	86 2f       	mov	r24, r22
 b82:	70 e0       	ldi	r23, 0x00	; 0
 b84:	60 e0       	ldi	r22, 0x00	; 0
 b86:	2a f0       	brmi	.+10     	; 0xb92 <__floatsisf+0x6c>
 b88:	9a 95       	dec	r25
 b8a:	66 0f       	add	r22, r22
 b8c:	77 1f       	adc	r23, r23
 b8e:	88 1f       	adc	r24, r24
 b90:	da f7       	brpl	.-10     	; 0xb88 <__floatsisf+0x62>
 b92:	88 0f       	add	r24, r24
 b94:	96 95       	lsr	r25
 b96:	87 95       	ror	r24
 b98:	97 f9       	bld	r25, 7
 b9a:	08 95       	ret

00000b9c <__fp_inf>:
 b9c:	97 f9       	bld	r25, 7
 b9e:	9f 67       	ori	r25, 0x7F	; 127
 ba0:	80 e8       	ldi	r24, 0x80	; 128
 ba2:	70 e0       	ldi	r23, 0x00	; 0
 ba4:	60 e0       	ldi	r22, 0x00	; 0
 ba6:	08 95       	ret

00000ba8 <__fp_nan>:
 ba8:	9f ef       	ldi	r25, 0xFF	; 255
 baa:	80 ec       	ldi	r24, 0xC0	; 192
 bac:	08 95       	ret

00000bae <__fp_pscA>:
 bae:	00 24       	eor	r0, r0
 bb0:	0a 94       	dec	r0
 bb2:	16 16       	cp	r1, r22
 bb4:	17 06       	cpc	r1, r23
 bb6:	18 06       	cpc	r1, r24
 bb8:	09 06       	cpc	r0, r25
 bba:	08 95       	ret

00000bbc <__fp_pscB>:
 bbc:	00 24       	eor	r0, r0
 bbe:	0a 94       	dec	r0
 bc0:	12 16       	cp	r1, r18
 bc2:	13 06       	cpc	r1, r19
 bc4:	14 06       	cpc	r1, r20
 bc6:	05 06       	cpc	r0, r21
 bc8:	08 95       	ret

00000bca <__fp_round>:
 bca:	09 2e       	mov	r0, r25
 bcc:	03 94       	inc	r0
 bce:	00 0c       	add	r0, r0
 bd0:	11 f4       	brne	.+4      	; 0xbd6 <__fp_round+0xc>
 bd2:	88 23       	and	r24, r24
 bd4:	52 f0       	brmi	.+20     	; 0xbea <__fp_round+0x20>
 bd6:	bb 0f       	add	r27, r27
 bd8:	40 f4       	brcc	.+16     	; 0xbea <__fp_round+0x20>
 bda:	bf 2b       	or	r27, r31
 bdc:	11 f4       	brne	.+4      	; 0xbe2 <__fp_round+0x18>
 bde:	60 ff       	sbrs	r22, 0
 be0:	04 c0       	rjmp	.+8      	; 0xbea <__fp_round+0x20>
 be2:	6f 5f       	subi	r22, 0xFF	; 255
 be4:	7f 4f       	sbci	r23, 0xFF	; 255
 be6:	8f 4f       	sbci	r24, 0xFF	; 255
 be8:	9f 4f       	sbci	r25, 0xFF	; 255
 bea:	08 95       	ret

00000bec <__fp_split3>:
 bec:	57 fd       	sbrc	r21, 7
 bee:	90 58       	subi	r25, 0x80	; 128
 bf0:	44 0f       	add	r20, r20
 bf2:	55 1f       	adc	r21, r21
 bf4:	59 f0       	breq	.+22     	; 0xc0c <__fp_splitA+0x10>
 bf6:	5f 3f       	cpi	r21, 0xFF	; 255
 bf8:	71 f0       	breq	.+28     	; 0xc16 <__fp_splitA+0x1a>
 bfa:	47 95       	ror	r20

00000bfc <__fp_splitA>:
 bfc:	88 0f       	add	r24, r24
 bfe:	97 fb       	bst	r25, 7
 c00:	99 1f       	adc	r25, r25
 c02:	61 f0       	breq	.+24     	; 0xc1c <__fp_splitA+0x20>
 c04:	9f 3f       	cpi	r25, 0xFF	; 255
 c06:	79 f0       	breq	.+30     	; 0xc26 <__fp_splitA+0x2a>
 c08:	87 95       	ror	r24
 c0a:	08 95       	ret
 c0c:	12 16       	cp	r1, r18
 c0e:	13 06       	cpc	r1, r19
 c10:	14 06       	cpc	r1, r20
 c12:	55 1f       	adc	r21, r21
 c14:	f2 cf       	rjmp	.-28     	; 0xbfa <__fp_split3+0xe>
 c16:	46 95       	lsr	r20
 c18:	f1 df       	rcall	.-30     	; 0xbfc <__fp_splitA>
 c1a:	08 c0       	rjmp	.+16     	; 0xc2c <__fp_splitA+0x30>
 c1c:	16 16       	cp	r1, r22
 c1e:	17 06       	cpc	r1, r23
 c20:	18 06       	cpc	r1, r24
 c22:	99 1f       	adc	r25, r25
 c24:	f1 cf       	rjmp	.-30     	; 0xc08 <__fp_splitA+0xc>
 c26:	86 95       	lsr	r24
 c28:	71 05       	cpc	r23, r1
 c2a:	61 05       	cpc	r22, r1
 c2c:	08 94       	sec
 c2e:	08 95       	ret

00000c30 <__fp_zero>:
 c30:	e8 94       	clt

00000c32 <__fp_szero>:
 c32:	bb 27       	eor	r27, r27
 c34:	66 27       	eor	r22, r22
 c36:	77 27       	eor	r23, r23
 c38:	cb 01       	movw	r24, r22
 c3a:	97 f9       	bld	r25, 7
 c3c:	08 95       	ret

00000c3e <__mulsf3>:
 c3e:	0b d0       	rcall	.+22     	; 0xc56 <__mulsf3x>
 c40:	c4 cf       	rjmp	.-120    	; 0xbca <__fp_round>
 c42:	b5 df       	rcall	.-150    	; 0xbae <__fp_pscA>
 c44:	28 f0       	brcs	.+10     	; 0xc50 <__mulsf3+0x12>
 c46:	ba df       	rcall	.-140    	; 0xbbc <__fp_pscB>
 c48:	18 f0       	brcs	.+6      	; 0xc50 <__mulsf3+0x12>
 c4a:	95 23       	and	r25, r21
 c4c:	09 f0       	breq	.+2      	; 0xc50 <__mulsf3+0x12>
 c4e:	a6 cf       	rjmp	.-180    	; 0xb9c <__fp_inf>
 c50:	ab cf       	rjmp	.-170    	; 0xba8 <__fp_nan>
 c52:	11 24       	eor	r1, r1
 c54:	ee cf       	rjmp	.-36     	; 0xc32 <__fp_szero>

00000c56 <__mulsf3x>:
 c56:	ca df       	rcall	.-108    	; 0xbec <__fp_split3>
 c58:	a0 f3       	brcs	.-24     	; 0xc42 <__mulsf3+0x4>

00000c5a <__mulsf3_pse>:
 c5a:	95 9f       	mul	r25, r21
 c5c:	d1 f3       	breq	.-12     	; 0xc52 <__mulsf3+0x14>
 c5e:	95 0f       	add	r25, r21
 c60:	50 e0       	ldi	r21, 0x00	; 0
 c62:	55 1f       	adc	r21, r21
 c64:	62 9f       	mul	r22, r18
 c66:	f0 01       	movw	r30, r0
 c68:	72 9f       	mul	r23, r18
 c6a:	bb 27       	eor	r27, r27
 c6c:	f0 0d       	add	r31, r0
 c6e:	b1 1d       	adc	r27, r1
 c70:	63 9f       	mul	r22, r19
 c72:	aa 27       	eor	r26, r26
 c74:	f0 0d       	add	r31, r0
 c76:	b1 1d       	adc	r27, r1
 c78:	aa 1f       	adc	r26, r26
 c7a:	64 9f       	mul	r22, r20
 c7c:	66 27       	eor	r22, r22
 c7e:	b0 0d       	add	r27, r0
 c80:	a1 1d       	adc	r26, r1
 c82:	66 1f       	adc	r22, r22
 c84:	82 9f       	mul	r24, r18
 c86:	22 27       	eor	r18, r18
 c88:	b0 0d       	add	r27, r0
 c8a:	a1 1d       	adc	r26, r1
 c8c:	62 1f       	adc	r22, r18
 c8e:	73 9f       	mul	r23, r19
 c90:	b0 0d       	add	r27, r0
 c92:	a1 1d       	adc	r26, r1
 c94:	62 1f       	adc	r22, r18
 c96:	83 9f       	mul	r24, r19
 c98:	a0 0d       	add	r26, r0
 c9a:	61 1d       	adc	r22, r1
 c9c:	22 1f       	adc	r18, r18
 c9e:	74 9f       	mul	r23, r20
 ca0:	33 27       	eor	r19, r19
 ca2:	a0 0d       	add	r26, r0
 ca4:	61 1d       	adc	r22, r1
 ca6:	23 1f       	adc	r18, r19
 ca8:	84 9f       	mul	r24, r20
 caa:	60 0d       	add	r22, r0
 cac:	21 1d       	adc	r18, r1
 cae:	82 2f       	mov	r24, r18
 cb0:	76 2f       	mov	r23, r22
 cb2:	6a 2f       	mov	r22, r26
 cb4:	11 24       	eor	r1, r1
 cb6:	9f 57       	subi	r25, 0x7F	; 127
 cb8:	50 40       	sbci	r21, 0x00	; 0
 cba:	8a f0       	brmi	.+34     	; 0xcde <__mulsf3_pse+0x84>
 cbc:	e1 f0       	breq	.+56     	; 0xcf6 <__mulsf3_pse+0x9c>
 cbe:	88 23       	and	r24, r24
 cc0:	4a f0       	brmi	.+18     	; 0xcd4 <__mulsf3_pse+0x7a>
 cc2:	ee 0f       	add	r30, r30
 cc4:	ff 1f       	adc	r31, r31
 cc6:	bb 1f       	adc	r27, r27
 cc8:	66 1f       	adc	r22, r22
 cca:	77 1f       	adc	r23, r23
 ccc:	88 1f       	adc	r24, r24
 cce:	91 50       	subi	r25, 0x01	; 1
 cd0:	50 40       	sbci	r21, 0x00	; 0
 cd2:	a9 f7       	brne	.-22     	; 0xcbe <__mulsf3_pse+0x64>
 cd4:	9e 3f       	cpi	r25, 0xFE	; 254
 cd6:	51 05       	cpc	r21, r1
 cd8:	70 f0       	brcs	.+28     	; 0xcf6 <__mulsf3_pse+0x9c>
 cda:	60 cf       	rjmp	.-320    	; 0xb9c <__fp_inf>
 cdc:	aa cf       	rjmp	.-172    	; 0xc32 <__fp_szero>
 cde:	5f 3f       	cpi	r21, 0xFF	; 255
 ce0:	ec f3       	brlt	.-6      	; 0xcdc <__mulsf3_pse+0x82>
 ce2:	98 3e       	cpi	r25, 0xE8	; 232
 ce4:	dc f3       	brlt	.-10     	; 0xcdc <__mulsf3_pse+0x82>
 ce6:	86 95       	lsr	r24
 ce8:	77 95       	ror	r23
 cea:	67 95       	ror	r22
 cec:	b7 95       	ror	r27
 cee:	f7 95       	ror	r31
 cf0:	e7 95       	ror	r30
 cf2:	9f 5f       	subi	r25, 0xFF	; 255
 cf4:	c1 f7       	brne	.-16     	; 0xce6 <__mulsf3_pse+0x8c>
 cf6:	fe 2b       	or	r31, r30
 cf8:	88 0f       	add	r24, r24
 cfa:	91 1d       	adc	r25, r1
 cfc:	96 95       	lsr	r25
 cfe:	87 95       	ror	r24
 d00:	97 f9       	bld	r25, 7
 d02:	08 95       	ret

00000d04 <_exit>:
 d04:	f8 94       	cli

00000d06 <__stop_program>:
 d06:	ff cf       	rjmp	.-2      	; 0xd06 <__stop_program>
